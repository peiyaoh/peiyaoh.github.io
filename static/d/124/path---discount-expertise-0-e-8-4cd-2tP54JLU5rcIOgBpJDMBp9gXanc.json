{"data":{"markdownRemark":{"html":"<div class=\"content has-text-justified\">\n<p>\nDate: 2013 ~ 2014\n</p>\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/73JwwdgtjdZtG9\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/secret/73JwwdgtjdZtG9\" title=\"Discount Expertise Metrics for Augmenting Community Interaction\" target=\"_blank\">Discount Expertise Metrics for Augmenting Community Interaction</a> </strong> from <strong><a href=\"//www.slideshare.net/peiyaoh\" target=\"_blank\">PEI-YAO HUNG</a></strong> </div>\n<hr />\n<div class=\"is-size-4 is-size-5-mobile\">Research & Design Strategy</div>\n<br />\n<p>\nI am a developer myself and also had experience teaching programming courses to adults and graduate students. I am aware how important it is for a developer to know how to find and consult online resources in the process of learning programming or developing applications. As a teacher, one of the very first resources I introduce to my student in the process of learning a new programming language is the API (Application Programmable Interface) document, usually provided by the official website for the programming language (e.g., Python). As a developer myself, I find useful resources online in different formats: blogs, forums, and Q&A communities. These experiences of mine suggest there could be signals of expertise contained in a programmer's browsing history.\n</p>\n<p>\nMy approach to investigate whether browsing history reflects a developer's level of expertise was first to gather evidence of whether developers with different level of expertise will use or look for different types of programming resources. To collect such evidence, I recruited university students who were taking their first programming courses, university students who had prior programming training and project experience, and professional developers from local programming meetup. Each participant was asked to fill out a questionnaire to document their programming experience and training. The data was used by the research team estimate their levels of expertise as the ground truth for evaluating machine estimation results.\n</p>\n<p>\nDuring the study period, I invited each developer to come into the lab and describe their recent experience (e.g., in the past two days) of doing programming tasks and consult online programming resources accordingly. To support participants during deliberation, I developed a browsing history tool using Adobe Flex that allowed users to extract browsing history from Google Chrome and Mozilla Firefox. The tool allowed participants to display, search, filter, and hide browsing history before uploading their history for analysis.\n</p>\n<figure class=\"image\">\n  <img src=\"/images/project/linkr/linkr_browser_history_tool.jpg\" />\n  <figcaption class=\"has-text-centered\">\n        The browser history tool, written in Adobe Flex, for participants to review, clean, filter, and upload their browsing history.\n  </figcaption>\n</figure>\n<br />\n<p>\nDuring in-person meetings, I invited the participant to open the browsing history tool and review the programming resources they visited recently, including how they got to different online programming resources (e.g., direct link or through search engine, which can be distinguished based on whether keywords have been used for searching prior to a page visit). At the end of each week, participants were asked to review and upload their browsing history. Through interviews, I gathered qualitative evidence regarding different occasions when developers would access programming resources. Such observations provide some initial evidence of why developers with varying levels of expertise might visit various resources. For instance, novices might visit API documents by following suggestions from their instructors, while experts might consult Q&As on StackOverflow when they were trying to solve rare and difficult problems.\n</p>\n<p>\nAfter obtaining initial evidence, I used programming resource types, namely page types, proposed by prior work and then extracted examples from data (i.e., browsing history) we collected. I manually reviewed and labeled 250 records per page type as training data. I calculated term-frequency and inverse document frequency for each webpage as features and used Linear Support Vector Classification to generate a binary classifier for each page type. The binary classifiers were used to label the rest of the browsing history. With all records labeled with page types, I used the percentage of different page categories as features and used logistic regression to investigate the relationships between these features and a developer's level of expertise.\n</p>\n<div class=\"is-size-4  is-size-5-mobile\">Outcomes</div>\n<p>\nOur results show that visiting tutorials, libraries, and Q&A pages provided a useful and conservative indication of whether a developer is a novice or an expert, but it is rather difficult to identify people who are intermediate.\n</p>\n<p>\n  For instance, using page visits to tutorial pages as the feature, I created a conservative binary classifier, using 80% as the threshold, that correctly identified novice programmers, with the cost of false negatives.\n</p>\n<div class=\"columns\">\n  <div class=\"column\"></div>  \n    <div class=\"column is-two-thirds\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Novice Classifier</th>\n            <th>Ground Truth</th>\n            <th>Proportion</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr class=\"is-selected\">\n            <td>Yes</td>\n            <td>Novice</td>\n            <td>4 of 4</td>\n          </tr>\n          <tr>\n            <td>No</td>\n            <td>Novice</td>\n            <td>4 of 13</td>\n          </tr>\n        </tbody>\n      </table>\n      <figcaption class=\"has-text-centered\">\n        A conservative novice classifer without false positives. All the programmers classified as novices were also rated as novices by the research team.\n      </figcaption>\n    </div>\n    <div class=\"column\"></div> \n</div>\n<p>\n  On the other hand, using page visits to code libraries and Q&A websites as the feature, I created a conservative binary classifier, using 80% as the threshold, that correctly identified expert programmers, with the cost of false negatives.\n</p>\n<div class=\"columns\">\n  <div class=\"column\"></div>  \n  <div class=\"column is-two-thirds\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Expert Classifier</th>\n          <th>Ground Truth</th>\n          <th>Proportion</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr class=\"is-selected\">\n          <td>Yes</td>\n          <td>Expert</td>\n          <td>4 of 4</td>\n        </tr>\n        <tr>\n          <td>No</td>\n          <td>Expert</td>\n          <td>5 of 13</td>\n        </tr>\n      </tbody>\n    </table>\n    <figcaption class=\"has-text-centered\">\n        A conservative expert classifer without false positives. All the programmers classified as experts were also rated as experts by the research team.\n      </figcaption>\n  </div>\n  <div class=\"column\"></div> \n</div>\n<div class=\"is-hidden\">\n<div class=\"is-size-4\">Research Process</div>\n<p>Develop participants recruit website: <a href=\"https://sites.google.com/a/umich.edu/sps/\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.</p>\n<p>Develop screening questionnaire: <a href=\"https://umich.qualtrics.com/jfe/form/SV_0xnWseiV5Nqo8eh?Q_JFE=qdg\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.</p>\n<p>Recruitment webpage: <a href=\"https://sites.google.com/a/umich.edu/sps/\">https://sites.google.com/a/umich.edu/sps/</a></p>\n<p>(publication, slides)</p>\n<div class=\"is-size-4\">Background & Problems</div>\nExpertise identification is important for various kinds of online and offline organizations, with practical applications such as supporting question answering, problem-solving, and team formation. Existing work has explored various data sources (e.g., self-created profiles, forum discussion, email exchanges, and work-related documents and records), but might still suffer from issues such as maintenance and the cold start problem.\n<hr />\n<div class=\"is-size-4\">Findings and Outcome</div>\nIn this work, we seek to explore a simple and universal measure to estimate the expertise of people based on information within their browsing history (i.e., URLs). Using developers as the target population, we demonstrate that it is possible to identify novices and experts of programming based on just two weeks of their browsing history by examining the types of programming related websites they visit.\n<hr />\n</div>","frontmatter":{"title":"Estimating Expertise to Augment Online Community Interaction","date":"2014-09-01","keywords":["Human-Computer Interaction","HCI","Computer-Supported Cooperative Work","CSCW","expertise","community","interaction","estimation","browsing","history","knowledge","Q&A","regression","support vector machine","data mining","machine learning"],"project_tag":"linkr"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/discount-expertise/"}}